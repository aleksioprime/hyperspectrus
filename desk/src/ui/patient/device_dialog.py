from sqlalchemy.orm import joinedload
from PyQt6.QtWidgets import (
    QVBoxLayout, QHBoxLayout, QPushButton, QTableWidget, QTableWidgetItem,
    QDialog, QComboBox, QMessageBox, QHeaderView
)
from PyQt6.QtCore import Qt, QTimer

from db.db import get_db_session
from db.models import Device, DeviceBinding
from ui.patient.device_worker import DeviceStatusWorker

class DeviceBindingDialog(QDialog):
    """
    –î–∏–∞–ª–æ–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Ö —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ —Å–µ—Ç—å.
    –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ–∑ –ø–æ—Ç–æ–∫–æ–≤ (QThread), —Ç–æ–ª—å–∫–æ —Å QTimer –∏ DeviceStatusWorker.
    """
    STATUS_CHECK_INTERVAL = 3000  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –º—Å

    def __init__(self, user, parent=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞, –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ —Å–≤—è–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        super().__init__(parent)
        self.setWindowTitle("–ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ IP")
        self.setMinimumWidth(500)
        self.user = user
        layout = QVBoxLayout(self)

        # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ | IP-–∞–¥—Ä–µ—Å | –°—Ç–∞—Ç—É—Å
        self.table = QTableWidget(0, 3)
        self.table.setHorizontalHeaderLabels(["–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "IP-–∞–¥—Ä–µ—Å", "–°—Ç–∞—Ç—É—Å"])
        self.table.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)
        self.table.setEditTriggers(
            QTableWidget.EditTrigger.DoubleClicked | QTableWidget.EditTrigger.SelectedClicked
        )
        self.table.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeMode.Stretch)
        self.table.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeMode.ResizeToContents)
        self.table.verticalHeader().setVisible(False)
        layout.addWidget(self.table)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.add_btn = QPushButton("–î–æ–±–∞–≤–∏—Ç—å")
        self.del_btn = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        self.save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        self.save_btn.setVisible(False)
        self.cancel_btn.setVisible(False)
        self.back_btn = QPushButton("–ù–∞–∑–∞–¥")
        self.back_btn.clicked.connect(self.close)

        btn_row = QHBoxLayout()
        btn_row.addWidget(self.add_btn)
        btn_row.addWidget(self.del_btn)
        btn_row.addWidget(self.save_btn)
        btn_row.addWidget(self.cancel_btn)
        btn_row.addStretch()
        btn_row.addWidget(self.back_btn)
        layout.addLayout(btn_row)

        # –°–∏–≥–Ω–∞–ª—ã
        self.add_btn.clicked.connect(self.add_row)
        self.del_btn.clicked.connect(self.delete_binding)
        self.save_btn.clicked.connect(self.save_row)
        self.cancel_btn.clicked.connect(self.cancel_add_row)
        self.table.selectionModel().selectionChanged.connect(self.on_selection_change)
        self.table.cellChanged.connect(self.on_cell_changed)

        # –•—Ä–∞–Ω–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤, —Å–≤—è–∑–µ–π –∏ —Ä–∞–±–æ—á–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        self.devices = []
        self.bindings = []
        self._adding_row = False
        self.status_timers = dict()     # row => QTimer
        self.status_workers = dict()    # row => DeviceStatusWorker

        self.reload()

    def reload(self):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ —Å–≤—è–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ —Ç–∞–π–º–µ—Ä–æ–≤ —Å—Ç–∞—Ç—É—Å–∞.
        """
        self._stop_all_timers()
        self._abort_all_workers()
        self.table.blockSignals(True)
        with get_db_session() as session:
            self.devices = session.query(Device).all()
            self.bindings = (
                session.query(DeviceBinding)
                .filter_by(user_id=str(self.user.id))
                .options(joinedload(DeviceBinding.device))
                .all()
            )
        self.table.setRowCount(0)
        for i, b in enumerate(self.bindings):
            self.table.insertRow(self.table.rowCount())
            row = self.table.rowCount() - 1

            device_item = QTableWidgetItem(b.device.name if b.device else "")
            device_item.setFlags(device_item.flags() & ~Qt.ItemFlag.ItemIsEditable)
            self.table.setItem(row, 0, device_item)

            ip_item = QTableWidgetItem(b.ip_address or "")
            ip_item.setFlags(ip_item.flags() | Qt.ItemFlag.ItemIsEditable)
            self.table.setItem(row, 1, ip_item)

            status_item = QTableWidgetItem("‚è≥")
            status_item.setFlags(status_item.flags() & ~Qt.ItemFlag.ItemIsEditable)
            self.table.setItem(row, 2, status_item)

            self._setup_status_timer(b.ip_address, row)

        self.table.blockSignals(False)
        self._adding_row = False
        self.save_btn.setVisible(False)
        self.cancel_btn.setVisible(False)
        self.add_btn.setVisible(True)
        self.add_btn.setEnabled(True)
        self.del_btn.setVisible(True)
        self.update_del_btn()

    def _setup_status_timer(self, ip, row):
        """
        –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ IP.
        """
        def check():
            self.check_device_status_async(ip, row)
        timer = QTimer(self)
        timer.setInterval(self.STATUS_CHECK_INTERVAL)
        timer.timeout.connect(check)
        timer.start()
        self.status_timers[row] = timer
        check()  # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É

    def _stop_all_timers(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã —Å—Ç–∞—Ç—É—Å–∞."""
        for t in self.status_timers.values():
            t.stop()
            t.deleteLater()
        self.status_timers.clear()

    def _abort_all_workers(self):
        """–ü—Ä–µ—Ä–≤–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ DeviceStatusWorker'—ã."""
        for w in self.status_workers.values():
            w.abort()
            w.deleteLater()
        self.status_workers.clear()

    def check_device_status_async(self, ip, row):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ IP –¥–ª—è —Å—Ç—Ä–æ–∫–∏ row.
        –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ç–∞–π–º–µ—Ä–∞ –∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ IP.
        """
        if not ip:
            self.table.setItem(row, 2, QTableWidgetItem("‚Äî"))
            return

        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å worker ‚Äî –æ—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π
        if row in self.status_workers:
            self.status_workers[row].abort()
            self.status_workers[row].deleteLater()

        worker = DeviceStatusWorker()
        self.status_workers[row] = worker

        def update_status(ip_checked, status):
            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å üü¢/üî¥ –≤ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            item = self.table.item(row, 2)
            if item:
                item.setText("üü¢" if status == 'online' else "üî¥")
            worker.deleteLater()
            self.status_workers.pop(row, None)

        worker.finished.connect(update_status)
        worker.error.connect(lambda ip, msg: update_status(ip, 'offline'))
        worker.check(ip)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–±–µ–∑ –ø–æ—Ç–æ–∫–æ–≤!)

    def add_row(self):
        """
        –ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (—Å–≤—è–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ-IP).
        """
        if self._adding_row:
            return
        # self.table.setFocus()
        row = self.table.rowCount()
        self.table.insertRow(row)
        combo = QComboBox()
        for dev in self.devices:
            combo.addItem(dev.name, str(dev.id))
        self.table.setCellWidget(row, 0, combo)
        ip_item = QTableWidgetItem("")
        ip_item.setFlags(ip_item.flags() | Qt.ItemFlag.ItemIsEditable)
        self.table.setItem(row, 1, ip_item)
        status_item = QTableWidgetItem("‚Äî")
        status_item.setFlags(status_item.flags() & ~Qt.ItemFlag.ItemIsEditable)
        self.table.setItem(row, 2, status_item)

        self._adding_row = True
        self.add_btn.setVisible(False)
        self.del_btn.setVisible(False)
        self.save_btn.setVisible(True)
        self.cancel_btn.setVisible(True)
        self.table.setCurrentCell(row, 1)
        self.table.editItem(self.table.item(row, 1))

    def cancel_add_row(self):
        """
        –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.
        """
        if self._adding_row:
            self.table.blockSignals(True)
            self.table.removeRow(self.table.rowCount() - 1)
            self.table.blockSignals(False)
            self._adding_row = False
            self.save_btn.setVisible(False)
            self.cancel_btn.setVisible(False)
            self.add_btn.setVisible(True)
            self.add_btn.setEnabled(True)
            self.del_btn.setVisible(True)
            self.update_del_btn()

    def save_row(self):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–≤—è–∑–∏ –≤ –±–∞–∑—É.
        """
        if not self._adding_row:
            return
        row = self.table.rowCount() - 1
        combo = self.table.cellWidget(row, 0)
        ip_item = self.table.item(row, 1)
        device_idx = combo.currentIndex() if combo else -1
        ip = ip_item.text().strip() if ip_item else ""
        if device_idx < 0 or not ip:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
            return
        device_id = self.devices[device_idx].id
        with get_db_session() as session:
            existing = session.query(DeviceBinding).filter_by(
                user_id=str(self.user.id), device_id=device_id
            ).first()
            if existing:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–≠—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ —Å–≤—è–∑–∞–Ω–æ —Å –≤–∞–º–∏!")
                self.cancel_add_row()
                return
            b = DeviceBinding(
                user_id=str(self.user.id),
                device_id=device_id,
                ip_address=ip,
            )
            session.add(b)
            session.commit()
        self.reload()

    def on_cell_changed(self, row, col):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è—á–µ–π–∫–∏: –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ IP –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞.
        """
        if not self._adding_row and row < len(self.bindings) and col == 1:
            ip_item = self.table.item(row, 1)
            new_ip = ip_item.text().strip() if ip_item else ""
            binding = self.bindings[row]
            with get_db_session() as session:
                db_binding = session.query(DeviceBinding).get(binding.id)
                if db_binding and new_ip != db_binding.ip_address:
                    db_binding.ip_address = new_ip
                    session.commit()
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            if row in self.status_timers:
                self.status_timers[row].stop()
                self.status_timers[row].start()
            self.table.setItem(row, 2, QTableWidgetItem("‚è≥"))
            self.check_device_status_async(new_ip, row)

    def on_selection_change(self, selected, deselected):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ –≤—ã–±–æ—Ä–∞."""
        self.update_del_btn()

    def update_del_btn(self):
        """–í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫."""
        rows = self.table.selectionModel().selectedRows()
        enabled = (
            not self._adding_row
            and len(rows) > 0
            and all(row.row() < len(self.bindings) for row in rows)
        )
        self.del_btn.setEnabled(enabled)

    def delete_binding(self):
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã.
        """
        rows = self.table.selectionModel().selectedRows()
        if not rows:
            return
        row = rows[0].row()
        if row < 0 or row >= len(self.bindings):
            return
        b = self.bindings[row]
        reply = QMessageBox.question(
            self, "–£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å",
            f"–£–¥–∞–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {b.device.name} —Å IP {b.ip_address}?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        if reply == QMessageBox.StandardButton.Yes:
            with get_db_session() as session:
                db = session.query(DeviceBinding).get(b.id)
                session.delete(db)
                session.commit()
            self.reload()

    def closeEvent(self, event):
        """
        –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞: –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –∏ –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.
        """
        self._stop_all_timers()
        self._abort_all_workers()
        super().closeEvent(event)
