from PyQt6.QtWidgets import QDialog, QFormLayout, QDateEdit, QComboBox, QListWidget, QTextEdit, QHBoxLayout, QPushButton, QLabel
from PyQt6.QtCore import QDate, Qt, QTimer, QThread

from sqlalchemy.orm import joinedload

from db.db import get_db_session
from db.models import DeviceBinding, Device
from ui.patient.device_worker import DeviceStatusWorker


class SessionDialog(QDialog):
    """
    –î–∏–∞–ª–æ–≥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–µ–∞–Ω—Å–∞: –≤—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –¥–∞—Ç—ã –∏ —Å–ø–µ–∫—Ç—Ä–æ–≤.
    """
    def __init__(self, user, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–°–æ–∑–¥–∞—Ç—å —Å–µ–∞–Ω—Å")
        self.user = user
        layout = QFormLayout(self)

        self.status_timer = QTimer(self)
        self.status_timer.setInterval(3000)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        self.status_timer.timeout.connect(self.check_device_status)
        self.status_timer.start()

        # --- –ü–æ–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —Å–ø–µ–∫—Ç—Ä–æ–≤, –∑–∞–º–µ—Ç–æ–∫ ---
        self.date_edit = QDateEdit()
        self.date_edit.setCalendarPopup(True)
        self.date_edit.setDisplayFormat("dd.MM.yyyy")
        self.date_edit.setDate(QDate.currentDate())

        self.device_combo = QComboBox()

        self.device_status_icon = QLabel("‚è≥")  # –ü–æ–∫–∞ —Å—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
        device_combo_layout = QHBoxLayout()
        device_combo_layout.addWidget(self.device_combo)
        device_combo_layout.addWidget(self.device_status_icon)

        with get_db_session() as session:
            self.devices = (
                session.query(DeviceBinding)
                .options(joinedload(DeviceBinding.device))
                .filter_by(user_id=str(user.id))
                .all()
            )

        for d in self.devices:
            self.device_combo.addItem(f"{d.device.name} ({d.ip_address})", d.id)

        self.spectra_list = QListWidget()
        self.spectra_list.setSelectionMode(QListWidget.SelectionMode.NoSelection)
        self.spectra_list.setFocusPolicy(Qt.FocusPolicy.NoFocus)
        self.spectra_list.setMaximumHeight(80)

        self.notes_edit = QTextEdit()
        self.notes_edit.setMaximumHeight(60)

        layout.addRow("–î–∞—Ç–∞ —Å–µ–∞–Ω—Å–∞:", self.date_edit)
        layout.addRow("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:", device_combo_layout)
        layout.addRow("–°–ø–µ–∫—Ç—Ä—ã:", self.spectra_list)
        layout.addRow("–ó–∞–º–µ—Ç–∫–∏:", self.notes_edit)

        # --- –ö–Ω–æ–ø–∫–∏ ---
        btn_row = QHBoxLayout()
        btn_row.addStretch()
        self.save_btn = QPushButton("–°–æ–∑–¥–∞—Ç—å")
        self.cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        self.save_btn.setEnabled(False)
        btn_row.addWidget(self.save_btn)
        btn_row.addWidget(self.cancel_btn)
        layout.addRow(btn_row)

        self.save_btn.clicked.connect(self.accept)
        self.cancel_btn.clicked.connect(self.reject)
        self.device_combo.currentIndexChanged.connect(self.update_spectra_list)
        self.device_combo.currentIndexChanged.connect(self.check_device_status)
        self.device_combo.currentIndexChanged.connect(self.on_device_changed)

        self.update_spectra_list()

    def update_spectra_list(self):
        """
        –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ø–µ–∫—Ç—Ä–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
        """
        idx = self.device_combo.currentIndex()
        self.spectra_list.clear()
        if idx < 0 or not self.devices:
            self.spectra = []
            return
        device_binding = self.devices[idx]
        with get_db_session() as session:
            device = session.query(Device).options(joinedload(Device.spectra)).get(device_binding.device_id)
            self.spectra = list(device.spectra)
        for s in self.spectra:
            self.spectra_list.addItem(f"{s.wavelength} ({s.rgb_r}, {s.rgb_g}, {s.rgb_b})")

        self.check_device_status()

    def check_device_status(self):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.
        """
        if getattr(self, 'is_closing', False):
            return

        idx = self.device_combo.currentIndex()
        if idx < 0 or not self.devices:
            self.device_status_icon.setText("‚ùì")
            self.save_btn.setEnabled(False)
            return

        ip = self.devices[idx].ip_address

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Ç–æ–∫, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –∂–∏–≤
        if hasattr(self, '_status_thread') and self._status_thread is not None:
            if self._status_thread.isRunning():
                self._status_thread.quit()
                self._status_thread.wait()
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É, –∏–Ω–∞—á–µ –æ–Ω–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç!
            self._status_thread = None

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
        self._status_thread = QThread()
        self._status_worker = DeviceStatusWorker(ip)
        self._status_worker.moveToThread(self._status_thread)
        self._status_thread.started.connect(self._status_worker.run)
        self._status_worker.finished.connect(self.on_device_status_checked)
        self._status_worker.error.connect(self.on_device_status_error)
        self._status_worker.finished.connect(self._status_thread.quit)
        self._status_thread.finished.connect(self.cleanup_status_thread)
        self._status_thread.start()

    def on_device_status_checked(self, ip, status):
        """
        –°–ª–æ—Ç: –æ–±–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –∏ –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.
        """
        if status == 'online':
            self.device_status_icon.setText("üü¢")
            self.save_btn.setEnabled(True)
        else:
            self.device_status_icon.setText("üî¥")
            self.save_btn.setEnabled(False)

    def on_device_status_error(self, ip, message):
        # –ú–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        pass

    def cleanup_status_thread(self):
        """
        –°–ª–æ—Ç –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ ‚Äî –æ–±–Ω—É–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Ç–æ–∫.
        """
        self._status_thread = None

    def get_data(self):
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ–∞–Ω—Å–∞
        """
        bdate = self.date_edit.date()
        idx = self.device_combo.currentIndex()
        device_binding = self.devices[idx] if idx >= 0 and self.devices else None
        return {
            "date": bdate.toPyDate() if bdate.isValid() else None,
            "device_binding": device_binding,
            "spectra": self.spectra,
            "notes": self.notes_edit.toPlainText().strip()
        }

    def on_device_changed(self):
        self.check_device_status()
        self.status_timer.start()

    def closeEvent(self, event):
        self.is_closing = True
        self.status_timer.stop()
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫ —Å—Ç–∞—Ç—É—Å–∞, –µ—Å–ª–∏ –æ–Ω –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç
        if hasattr(self, '_status_thread') and self._status_thread is not None:
            if self._status_thread.isRunning():
                self._status_thread.quit()
                self._status_thread.wait()
            self._status_thread = None
            self._status_worker = None
        super().closeEvent(event)
