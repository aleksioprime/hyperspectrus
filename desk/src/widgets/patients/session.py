from PyQt6.QtWidgets import QDialog, QFormLayout, QDateEdit, QComboBox, QListWidget, QTextEdit, QHBoxLayout, QPushButton, QLabel
from PyQt6.QtCore import QDate, Qt, QTimer
import requests
from sqlalchemy.orm import joinedload

from db.db import SessionLocal
from db.models import DeviceBinding, Device


class SessionDialog(QDialog):
    """
    –î–∏–∞–ª–æ–≥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–µ–∞–Ω—Å–∞: –≤—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –¥–∞—Ç—ã –∏ —Å–ø–µ–∫—Ç—Ä–æ–≤.
    """
    def __init__(self, user, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–°–æ–∑–¥–∞—Ç—å —Å–µ–∞–Ω—Å")
        self.user = user
        layout = QFormLayout(self)

        self.status_timer = QTimer(self)
        self.status_timer.setInterval(3000)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        self.status_timer.timeout.connect(self.check_device_status)
        self.status_timer.start()

        # --- –ü–æ–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —Å–ø–µ–∫—Ç—Ä–æ–≤, –∑–∞–º–µ—Ç–æ–∫ ---
        self.date_edit = QDateEdit()
        self.date_edit.setCalendarPopup(True)
        self.date_edit.setDisplayFormat("dd.MM.yyyy")
        self.date_edit.setDate(QDate.currentDate())

        self.device_combo = QComboBox()

        self.device_status_icon = QLabel("‚è≥")  # –ü–æ–∫–∞ —Å—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
        device_combo_layout = QHBoxLayout()
        device_combo_layout.addWidget(self.device_combo)
        device_combo_layout.addWidget(self.device_status_icon)

        session = SessionLocal()
        self.devices = (
            session.query(DeviceBinding)
            .options(joinedload(DeviceBinding.device))
            .filter_by(user_id=str(user.id))
            .all()
        )
        session.close()

        for d in self.devices:
            self.device_combo.addItem(f"{d.device.name} ({d.ip_address})", d.id)

        self.spectra_list = QListWidget()
        self.spectra_list.setSelectionMode(QListWidget.SelectionMode.NoSelection)
        self.spectra_list.setFocusPolicy(Qt.FocusPolicy.NoFocus)
        self.spectra_list.setMaximumHeight(80)

        self.notes_edit = QTextEdit()
        self.notes_edit.setMaximumHeight(60)

        layout.addRow("–î–∞—Ç–∞ —Å–µ–∞–Ω—Å–∞:", self.date_edit)
        layout.addRow("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:", device_combo_layout)
        layout.addRow("–°–ø–µ–∫—Ç—Ä—ã:", self.spectra_list)
        layout.addRow("–ó–∞–º–µ—Ç–∫–∏:", self.notes_edit)

        # --- –ö–Ω–æ–ø–∫–∏ ---
        btn_row = QHBoxLayout()
        self.save_btn = QPushButton("–°–æ–∑–¥–∞—Ç—å")
        self.cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        btn_row.addWidget(self.save_btn)
        btn_row.addWidget(self.cancel_btn)
        layout.addRow(btn_row)

        self.save_btn.clicked.connect(self.accept)
        self.cancel_btn.clicked.connect(self.reject)
        self.device_combo.currentIndexChanged.connect(self.update_spectra_list)
        self.device_combo.currentIndexChanged.connect(self.check_device_status)
        self.device_combo.currentIndexChanged.connect(self.on_device_changed)

        self.update_spectra_list()

    def update_spectra_list(self):
        """
        –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ø–µ–∫—Ç—Ä–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
        """
        idx = self.device_combo.currentIndex()
        self.spectra_list.clear()
        if idx < 0 or not self.devices:
            self.spectra = []
            return
        device_binding = self.devices[idx]
        session = SessionLocal()
        device = session.query(Device).options(joinedload(Device.spectra)).get(device_binding.device_id)
        self.spectra = list(device.spectra)
        for s in self.spectra:
            self.spectra_list.addItem(f"{s.wavelength} ({s.rgb_r}, {s.rgb_g}, {s.rgb_b})")
        session.close()

        self.check_device_status()

    def check_device_status(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
        """
        idx = self.device_combo.currentIndex()
        if idx < 0 or not self.devices:
            self.device_status_icon.setText("‚ùì")
            self.save_btn.setEnabled(False)
            return
        ip = self.devices[idx].ip_address
        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å HEAD-–∑–∞–ø—Ä–æ—Å (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ ping, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            resp = requests.head(f"http://{ip}:8080/", timeout=1)
            if resp.status_code < 500:
                self.device_status_icon.setText("üü¢")
                self.save_btn.setEnabled(True)
            else:
                self.device_status_icon.setText("üî¥")
                self.save_btn.setEnabled(False)
        except Exception:
            self.device_status_icon.setText("üî¥")
            self.save_btn.setEnabled(False)

    def get_data(self):
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ–∞–Ω—Å–∞
        """
        bdate = self.date_edit.date()
        idx = self.device_combo.currentIndex()
        device_binding = self.devices[idx] if idx >= 0 and self.devices else None
        return {
            "date": bdate.toPyDate() if bdate.isValid() else None,
            "device_binding": device_binding,
            "spectra": self.spectra,
            "notes": self.notes_edit.toPlainText().strip()
        }

    def on_device_changed(self):
        self.check_device_status()
        self.status_timer.start()

    def closeEvent(self, event):
        self.status_timer.stop()
        super().closeEvent(event)
