import os
import socket
import struct
import pickle
import cv2
import numpy as np
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtCore import QTimer
from datetime import datetime


from PyQt5.QtCore import QThread, pyqtSignal
import socket

class VideoStreamWorker(QThread):
    update_status = pyqtSignal(str)  # –°–∏–≥–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    connected_signal = pyqtSignal(bool)  # –°–∏–≥–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

    def __init__(self, ip):
        super().__init__()
        self.ip = ip
        self.connected = False
        self.max_attempts = 3

    def run(self):
        """–§–æ–Ω–æ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫—É"""
        self.connection_attempts = 0

        while self.connection_attempts < self.max_attempts:
            self.connection_attempts += 1
            self.update_status.emit(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {self.connection_attempts}/{self.max_attempts}...")

            try:
                client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                client_socket.settimeout(3)
                client_socket.connect((self.ip, 9999))

                self.update_status.emit("–û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞...")
                first_packet = client_socket.recv(4096)

                if not first_packet:
                    self.update_status.emit("–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
                    raise ConnectionError("–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

                self.connected = True
                self.update_status.emit("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫—É")
                self.connected_signal.emit(True)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                return

            except Exception as e:
                self.update_status.emit(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
                self.connected = False

        self.update_status.emit("–ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        self.connected_signal.emit(False)  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å


class VideoStream:
    def __init__(self, video_label, status_text):
        self.video_label = video_label
        self.status_text = status_text
        self.connected = False
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_frame)
        self.latest_frame = None
        self.client_socket = None

        self.placeholder_active = False
        self.connection_attempts = 0
        self.max_attempts = 3

        if not os.path.exists("records"):
            os.makedirs("records")

        self.placeholder_path = os.path.join("src/img", "no_signal.png")

    def create_placeholder(self):
        """–°–æ–∑–¥–∞—ë—Ç –∑–∞–≥–ª—É—à–∫—É no_signal.png, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        img = 255 * np.ones((480, 640, 3), dtype=np.uint8)
        cv2.putText(img, "NO SIGNAL", (200, 250), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
        cv2.imwrite(self.placeholder_path, img)

    def connect_to_video(self, ip):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if self.connected:
            self.status_text.append("–£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫—É")
            return

        self.connect_button.setEnabled(False)

        self.worker = VideoStreamWorker(ip)
        self.worker.update_status.connect(self.status_text.append)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        self.worker.connected_signal.connect(self.on_connection_result)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.worker.start()  # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞

    def on_connection_result(self, success):
        if success:
            self.connected = True
            self.timer.start(33)
        else:
            self.connect_button.setEnabled(True)

    def update_frame(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤"""

        if not self.connected:
            if not self.placeholder_active:
                self.show_placeholder()
                self.placeholder_active = True
            return

        try:
            data = b""
            payload_size = struct.calcsize(">L")

            while len(data) < payload_size:
                packet = self.client_socket.recv(4096)
                if not packet:
                    self.status_text.append("–†–∞–∑—Ä—ã–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                    self.connected = False
                    self.show_placeholder()
                    return
                data += packet

            packed_msg_size = data[:payload_size]
            data = data[payload_size:]
            msg_size = struct.unpack(">L", packed_msg_size)[0]

            while len(data) < msg_size:
                data += self.client_socket.recv(4096)

            frame_data = data[:msg_size]
            self.latest_frame = pickle.loads(frame_data)
            frame = cv2.cvtColor(self.latest_frame, cv2.COLOR_BGR2RGB)

            h, w, ch = frame.shape
            qimg = QImage(frame.data, w, h, ch * w, QImage.Format_RGB888)
            self.video_label.setPixmap(QPixmap.fromImage(qimg))

            if not self.connected:
                self.connected = True
                self.status_text.append("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫—É")

            self.placeholder_active = False

        except Exception as e:
            self.status_text.append(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ: {e}")
            self.connected = False
            if not self.placeholder_active:
                self.show_placeholder()
                self.placeholder_active = True

    def show_placeholder(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É-–∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤–∏–¥–µ–æ"""
        if not os.path.exists(self.placeholder_path):
            self.create_placeholder()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏
        placeholder = QPixmap(self.placeholder_path)

        if placeholder.isNull():
            self.status_text.append("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–≥–ª—É—à–∫—É!")
            return

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥ —Ä–∞–∑–º–µ—Ä QLabel
        self.video_label.setPixmap(placeholder.scaled(
            self.video_label.width(),
            self.video_label.height()
        ))

        self.status_text.append("–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞")

    def enable_connect_button(self):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"""
        self.status_text.append("üîÑ –ú–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.")
        self.connect_button.setEnabled(True)  # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É

    def capture_frame(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–æ–ø-–∫–∞–¥—Ä–∞."""
        if self.latest_frame is None:
            self.status_text.append("–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–¥—Ä")
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –ø–æ –¥–∞—Ç–µ
        filename = f"records/frame_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.png"

        try:
            cv2.imwrite(filename, self.latest_frame)
            self.status_text.append(f"–ö–∞–¥—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filename}")
        except Exception as e:
            self.status_text.append(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–¥—Ä–∞: {str(e)}")
