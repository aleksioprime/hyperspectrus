import time

from PyQt5.QtWidgets import QApplication, QMessageBox, QLabel, QWidget, QPushButton, QVBoxLayout, QHBoxLayout, QSizePolicy
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import Qt, QSize, QTimer

from config.settings import icon_path, SPECTRA
from services.photo import save_photo, clear_photos, get_photos
from services.arduino import ArduinoController, ArduinoWatcher
from ui.camera import CameraWidget
from ui.gallery import GalleryWidget


class CameraApp(QWidget):
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∫–∞–º–µ—Ä—ã —Å:
        - –≤–∏–¥–∂–µ—Ç–æ–º –∫–∞–º–µ—Ä—ã;
        - –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Å—ä—ë–º–∫–∏, –≥–∞–ª–µ—Ä–µ–∏, –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ;
        - —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π;
        - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Arduino –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ.
        """
        super().__init__()
        self.setCursor(Qt.BlankCursor)
        self.setWindowTitle("Hyperspectrus")
        self.setFixedSize(480, 320)

        # –í–∏–¥–∂–µ—Ç –∫–∞–º–µ—Ä—ã
        self.camera_widget = CameraWidget()
        self.camera_widget.setFixedSize(380, 320)

        # –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        self.status_bar = QLabel()
        self.status_bar.setFixedHeight(30)
        self.status_bar.setStyleSheet("background-color: #222; color: white; padding-left: 8px;")

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.photo_btn = QPushButton()
        self.photo_btn.setIcon(QIcon(icon_path("camera.png")))

        self.gallery_btn = QPushButton()
        self.gallery_btn.setIcon(QIcon(icon_path("gallery.png")))

        self.upload_btn = QPushButton()
        self.upload_btn.setIcon(QIcon(icon_path("upload.png")))

        self.delete_btn = QPushButton()
        self.delete_btn.setIcon(QIcon(icon_path("trash.png")))

        for btn in [self.photo_btn, self.gallery_btn, self.upload_btn, self.delete_btn]:
            btn.setIconSize(QSize(48, 48))
            btn.setFixedHeight(70)
            btn.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
            btn.setStyleSheet("padding: 0px; margin: 0px; border: none;")

        self.photo_btn.clicked.connect(self.take_photos)
        self.gallery_btn.clicked.connect(self.show_photos)
        self.upload_btn.clicked.connect(self.upload_photos)
        self.delete_btn.clicked.connect(self.delete_photos)

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –±–ª–æ–∫ –∫–Ω–æ–ø–æ–∫
        btn_layout = QVBoxLayout()
        btn_layout.setContentsMargins(0, 0, 0, 0)
        btn_layout.setSpacing(0)
        for btn in [self.photo_btn, self.gallery_btn, self.upload_btn, self.delete_btn]:
            btn_layout.addWidget(btn)

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–ª–æ–π: –∫–∞–º–µ—Ä–∞ + –∫–Ω–æ–ø–∫–∏
        top_layout = QHBoxLayout()
        top_layout.setContentsMargins(0, 0, 0, 0)
        top_layout.setSpacing(0)
        top_layout.addWidget(self.camera_widget)
        top_layout.addLayout(btn_layout)

        # –û–±—â–∏–π layout
        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)
        main_layout.addLayout(top_layout)
        main_layout.addWidget(self.status_bar)
        self.setLayout(main_layout)

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è Arduino
        self.arduino_available = False
        self.arduino_watcher = ArduinoWatcher()
        self.arduino_watcher.status_changed.connect(self.on_arduino_status_changed)
        self.arduino_watcher.start()

    def on_arduino_status_changed(self, available: bool, port: str):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–ª–∞–≥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Arduino –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:
        - –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É;
        - –≤–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å—ä—ë–º–∫–∏.
        """
        self.arduino_available = available
        if available:
            self.status_bar.setText(f"Arduino –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ ({port})")
        else:
            self.status_bar.setText("Arduino –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        self.update_buttons_state()

    def take_photos(self):
        """
        –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Å–µ—Ä–∏—é —Å—ä—ë–º–æ–∫ —Å —É–ø—Ä–∞–≤–ª—è–µ–º–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —á–µ—Ä–µ–∑ Arduino.
        –ö–∞–∂–¥—ã–π –∫–∞–¥—Ä –¥–µ–ª–∞–µ—Ç—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å–ø–µ–∫—Ç—Ä–µ –∏–∑ SPECTRA. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
        —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å Arduino —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª (SET / PHOTO_DONE).
        """
        self.status_bar.setText("–ù–∞—á–∏–Ω–∞—é —Å—ä—ë–º–∫—É...")
        self.disable_all_buttons()
        QApplication.processEvents()

        if not self.arduino_available:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "Arduino –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω")
            return

        clear_photos()

        self.photo_index = 0
        self.arduino = ArduinoController()
        self.start_next_photo()

    def start_next_photo(self):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É –ø–æ–¥—Å–≤–µ—Ç–∫–∏ Arduino –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –≤ SPECTRA,
        –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∑–∞—Ö–≤–∞—Ç —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ QTimer. –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç —Å–µ—Ä–∏—é, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞.
        """
        if self.photo_index >= len(SPECTRA):
            self.arduino.send_and_wait("PHOTO_DONE", "OFF_DONE")
            self.arduino.close()
            self.status_bar.setText("–°—ä—ë–º–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            self.update_buttons_state()
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∏ –∂–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        r, g, b = SPECTRA[self.photo_index]
        self.status_bar.setText(f"–ü–æ–¥—Å–≤–µ—Ç–∫–∞: {r},{g},{b} (—Ñ–æ—Ç–æ {self.photo_index + 1})")

        if not self.arduino.send_and_wait(f"SET {r},{g},{b}", "OK"):
            self.status_bar.setText("‚ùå –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –Ω–µ –≤–∫–ª—é—á–∏–ª–∞—Å—å")
            self.arduino.close()
            return

        # –î–µ–ª–∞–µ–º —Å–Ω–∏–º–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã —Å–≤–µ—Ç —É—Å–ø–µ–ª –≤–∫–ª—é—á–∏—Ç—å—Å—è
        QTimer.singleShot(500, self.capture_photo)

    def capture_photo(self):
        """
        –î–µ–ª–∞–µ—Ç —Å–Ω–∏–º–æ–∫ —Å –∫–∞–º–µ—Ä—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ, —Å–æ–æ–±—â–∞–µ—Ç Arduino –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏,
        –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É —Å—ä—ë–º–∫–∏.
        """
        # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–∞–¥—Ä –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        frame = self.camera_widget.get_frame()
        if frame is not None:
            save_photo(frame, self.photo_index)

        # –û–ø–æ–≤–µ—â–∞–µ–º Arduino –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Å—ä—ë–º–∫–∏ –∏ –∂–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        if not self.arduino.send_and_wait("PHOTO_DONE", "OFF_DONE"):
            self.status_bar.setText("‚ùå –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –Ω–µ –æ—Ç–∫–ª—é—á–∏–ª–∞—Å—å")
            self.arduino.close()
            return

        self.photo_index += 1
        QTimer.singleShot(200, self.start_next_photo)

    def delete_photos(self):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
        –ü—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—á–∏—â–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —Ñ–æ—Ç–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
        """
        reply = QMessageBox.question(self, "–£–¥–∞–ª–∏—Ç—å", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?",
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            clear_photos()
            self.status_bar.setText("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É–¥–∞–ª–µ–Ω—ã")
            self.update_buttons_state()

    def update_buttons_state(self):
        """
        –í–∫–ª—é—á–∞–µ—Ç/–æ—Ç–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Ñ–æ—Ç–æ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Arduino.
        """
        has_photos = len(get_photos()) > 0
        self.photo_btn.setEnabled(self.arduino_available)
        self.gallery_btn.setEnabled(has_photos)
        self.upload_btn.setEnabled(has_photos)
        self.delete_btn.setEnabled(has_photos)

    def disable_all_buttons(self):
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–≤–æ –≤—Ä–µ–º—è —Å—ä—ë–º–∫–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏).
        """
        self.photo_btn.setEnabled(False)
        self.gallery_btn.setEnabled(False)
        self.upload_btn.setEnabled(False)
        self.delete_btn.setEnabled(False)

    def show_photos(self):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–∞–ª–µ—Ä–µ–∏ –≤–æ –≤–µ—Å—å —ç–∫—Ä–∞–Ω.
        """
        self.gallery = GalleryWidget()
        self.gallery.setWindowTitle("üìÅ –ì–∞–ª–µ—Ä–µ—è")
        self.gallery.destroyed.connect(lambda: self.activateWindow())
        self.gallery.showFullScreen()

    def upload_photos(self):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ—Ä–∏—é —Å–Ω–∏–º–∫–æ–≤
        """
        reply = QMessageBox.question(self, "–ó–∞–≥—Ä—É–∑–∫–∞", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?",
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            self.status_bar.setText("–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

    def showEvent(self, event):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø–æ–∫–∞–∑–∞ –æ–∫–Ω–∞: –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        """
        super().showEvent(event)
        self.update_buttons_state()

    def closeEvent(self, event):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∫–∞–º–µ—Ä—É.
        """
        self.arduino_watcher.stop()
        self.camera_widget.close()
        event.accept()
