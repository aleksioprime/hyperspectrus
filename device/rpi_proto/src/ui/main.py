import os
import shutil

from PyQt5.QtWidgets import (
    QApplication, QMessageBox, QLabel, QWidget, QPushButton,
    QVBoxLayout, QHBoxLayout, QSizePolicy, QComboBox
)
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import QSize, QTimer

from config.settings import icon_path
from services.photo import save_photo_for_task, clear_photos_for_task, get_photos_for_task
from services.arduino import ArduinoController, ArduinoWatcher
from services.hotspot import enable_hotspot, disable_hotspot
from ui.camera import CameraWidget
from ui.gallery import GalleryWidget
from ui.confirm import ConfirmDialog
from models.db import SessionLocal, PhotoTask

class CameraApp(QWidget):
    """
    –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ: –∫–∞–º–µ—Ä–∞, –∑–∞–¥–∞—á–∏, Hotspot, —Å—ä–µ–º–∫–∞, –≥–∞–ª–µ—Ä–µ—è.
    """
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Hyperspectrus")
        self.setFixedSize(480, 320)

        self.arduino_available = False
        self.shooting_in_progress = False
        self.tasks_map = {}
        self.hotspot_active = False
        self.hotspot_state = None

        # –ê–≤—Ç–æ-–≤–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_file = os.path.expanduser("~/.hotspot_state.json")
        if os.path.exists(state_file):
            print("üì∂ –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ. –í–∫–ª—é—á–∞–µ–º —Ç–æ—á–∫—É –¥–æ—Å—Ç—É–ø–∞...")
            success, state = enable_hotspot()
            if success:
                self.hotspot_active = True
                self.hotspot_state = state
                print("‚úÖ –¢–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å —Ç–æ—á–∫—É –¥–æ—Å—Ç—É–ø–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")

        # --- –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å: –∑–∞–¥–∞—á–∞ + –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞ ---
        self.task_combo = QComboBox()
        self.task_combo.setFixedHeight(38)
        self.task_combo.setContentsMargins(0, 0, 0, 0)
        self.task_combo.currentIndexChanged.connect(self.update_buttons_state)

        self.clear_tasks_btn = QPushButton()
        self.clear_tasks_btn.setIcon(QIcon(icon_path("delete_task.png")))  # –ü–æ–¥–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–Ω–∞—á–æ–∫
        self.clear_tasks_btn.setIconSize(QSize(28, 28))
        self.clear_tasks_btn.setFixedSize(38, 38)
        self.clear_tasks_btn.setToolTip("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏")
        self.clear_tasks_btn.clicked.connect(self.clear_all_tasks)

        self.hotspot_toggle_btn = QPushButton()
        self.hotspot_toggle_btn.setCheckable(True)
        self.hotspot_toggle_btn.setIconSize(QSize(28, 28))
        self.hotspot_toggle_btn.setFixedSize(38, 38)
        self.hotspot_toggle_btn.clicked.connect(self.toggle_hotspot)

        self.ip_btn = QPushButton("IP")
        self.ip_btn.setFixedSize(40, 38)
        self.ip_btn.clicked.connect(self.show_ip_address)

        lbl = QLabel("–ó–∞–¥–∞—á–∞:")
        lbl.setSizePolicy(QSizePolicy.Minimum, QSizePolicy.Fixed)
        self.task_combo.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        self.task_combo.setFixedHeight(38)

        top_panel = QHBoxLayout()
        top_panel.setContentsMargins(6, 0, 6, 6)
        top_panel.setSpacing(4)
        top_panel.addWidget(self.task_combo, stretch=1)
        top_panel.addWidget(self.clear_tasks_btn)
        top_panel.addWidget(self.hotspot_toggle_btn)
        top_panel.addWidget(self.ip_btn)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∏ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        if self.hotspot_active:
            self.hotspot_toggle_btn.setChecked(True)
            self.hotspot_toggle_btn.setIcon(QIcon(icon_path("wifi_on.png")))
        else:
            self.hotspot_toggle_btn.setChecked(False)
            self.hotspot_toggle_btn.setIcon(QIcon(icon_path("wifi_off.png")))

        # --- –ö–∞–º–µ—Ä–∞ + –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å ---
        self.camera_widget = CameraWidget()
        self.camera_widget.setFixedSize(380, 320)

        # --- –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ---
        self.photo_btn = QPushButton()
        self.photo_btn.setIcon(QIcon(icon_path("camera.png")))
        self.gallery_btn = QPushButton()
        self.gallery_btn.setIcon(QIcon(icon_path("gallery.png")))
        self.delete_btn = QPushButton()
        self.delete_btn.setIcon(QIcon(icon_path("trash.png")))
        for btn in [self.photo_btn, self.gallery_btn, self.delete_btn]:
            btn.setIconSize(QSize(48, 48))
            btn.setFixedHeight(70)
            btn.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
            btn.setStyleSheet("padding: 0px; margin: 0px; border: none;")
        self.photo_btn.clicked.connect(self.take_photos)
        self.gallery_btn.clicked.connect(self.show_photos)
        self.delete_btn.clicked.connect(self.delete_photos)

        btn_layout = QVBoxLayout()
        btn_layout.setContentsMargins(0, 0, 0, 0)
        btn_layout.setSpacing(0)
        for btn in [self.photo_btn, self.gallery_btn, self.delete_btn]:
            btn_layout.addWidget(btn)

        top_layout = QHBoxLayout()
        top_layout.setContentsMargins(0, 0, 0, 0)
        top_layout.setSpacing(0)
        top_layout.addWidget(self.camera_widget)
        top_layout.addLayout(btn_layout)

        # --- –°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
        self.status_bar = QLabel()
        self.status_bar.setFixedHeight(30)
        self.status_bar.setStyleSheet("background-color: #222; color: white; padding-left: 8px;")
        if self.hotspot_active:
            self.status_bar.setText("–¢–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤–∫–ª—é—á–µ–Ω–∞")

        # --- –ì–ª–∞–≤–Ω—ã–π layout ---
        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)
        main_layout.addLayout(top_panel)
        main_layout.addLayout(top_layout)
        main_layout.addWidget(self.status_bar)
        self.setLayout(main_layout)

        # --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á ---
        self.task_update_timer = QTimer()
        self.task_update_timer.timeout.connect(self.update_tasks)
        self.task_update_timer.start(3000)

        self.update_tasks()

        # --- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Arduino ---
        self.arduino_watcher = ArduinoWatcher()
        self.arduino_watcher.status_changed.connect(self.on_arduino_status_changed)
        self.arduino_watcher.start()

    def show_ip_address(self):
        """–í—ã–≤–æ–¥–∏—Ç IP-–∞–¥—Ä–µ—Å wlan0 –≤ —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É."""
        import socket
        import fcntl
        import struct

        def get_ip_address(ifname):
            try:
                s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                return socket.inet_ntoa(fcntl.ioctl(
                    s.fileno(),
                    0x8915,  # SIOCGIFADDR
                    struct.pack('256s', ifname[:15].encode('utf-8'))
                )[20:24])
            except Exception:
                return None

        ip = get_ip_address("wlan0")
        if ip:
            self.status_bar.setText(f"IP-–∞–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {ip}")
        else:
            self.status_bar.setText("IP-–∞–¥—Ä–µ—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω")

    def update_tasks(self):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.
        –ï—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç "–ù–µ—Ç –∑–∞–¥–∞—á" –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è.
        """
        db = SessionLocal()
        tasks = db.query(PhotoTask).order_by(PhotoTask.created_at.desc()).all()
        db.close()
        self.task_combo.blockSignals(True)
        self.task_combo.clear()
        self.tasks_map = {}

        if not tasks:
            self.task_combo.addItem("–ù–µ—Ç –∑–∞–¥–∞—á", None)
            self.task_combo.setEnabled(False)
            self.photo_btn.setEnabled(False)
            self.gallery_btn.setEnabled(False)
            self.delete_btn.setEnabled(False)
        else:
            for idx, task in enumerate(tasks):
                text = f"{task.title} [{task.status}]"
                self.task_combo.addItem(text, task.id)
                self.tasks_map[task.id] = task
            self.task_combo.setEnabled(True)
            last_index = self.task_combo.count() - 1
            self.task_combo.setCurrentIndex(last_index)

        self.task_combo.blockSignals(False)
        self.clear_tasks_btn.setEnabled(bool(tasks))
        self.update_buttons_state()

    def clear_all_tasks(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏."""
        reply = QMessageBox.question(
            self, "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–¥–∞—á–∏ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?",
            QMessageBox.Yes | QMessageBox.No, QMessageBox.No
        )
        if reply != QMessageBox.Yes:
            return

        db = SessionLocal()
        tasks = db.query(PhotoTask).all()
        task_ids = [task.id for task in tasks]
        for task in tasks:
            db.delete(task)  # —ç—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Å cascade
        db.commit()
        db.close()

        # –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º –ø–∞–ø–∫–∏
        from config.settings import PHOTO_DIR  # –∏–ª–∏ —Å–≤–æ–π –ø—É—Ç—å
        for task_id in task_ids:
            dir_path = os.path.join(PHOTO_DIR, f"task_{task_id}")
            if os.path.isdir(dir_path):
                try:
                    shutil.rmtree(dir_path)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ {dir_path}: {e}")

        self.status_bar.setText("–í—Å–µ –∑–∞–¥–∞—á–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É–¥–∞–ª–µ–Ω—ã")
        self.update_tasks()
        self.update_buttons_state()

    def on_arduino_status_changed(self, available: bool, port: str):
        """–°–ª–æ—Ç: –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫."""
        self.arduino_available = available
        if available:
            self.status_bar.setText(f"Arduino –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ ({port})")
        else:
            self.status_bar.setText("Arduino –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        self.update_buttons_state()

    def get_selected_task(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ (–∏–ª–∏ None, –µ—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–ù–µ—Ç –∑–∞–¥–∞—á").
        """
        idx = self.task_combo.currentIndex()
        if idx < 0:
            return None
        task_id = self.task_combo.currentData()
        if not task_id or task_id not in self.tasks_map:
            return None
        return self.tasks_map[task_id]

    def take_photos(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–∏—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ."""
        self.shooting_in_progress = True
        self.disable_all_buttons()
        self.status_bar.setText("–ù–∞—á–∏–Ω–∞—é —Å—ä—ë–º–∫—É...")
        QApplication.processEvents()
        if not self.arduino_available:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "Arduino –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω")
            self.shooting_in_progress = False
            self.update_buttons_state()
            return
        task = self.get_selected_task()
        if not task:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É!")
            self.shooting_in_progress = False
            self.update_buttons_state()
            return
        clear_photos_for_task(task.id)
        self.photo_index = 0
        self.current_task_id = task.id
        self.current_spectra = task.spectra
        self.arduino = ArduinoController()
        self.start_next_photo()

    def start_next_photo(self):
        """–í–∫–ª—é—á–∞–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫—É, –¥–µ–ª–∞–µ—Ç —Å–Ω–∏–º–æ–∫, –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –ø–æ —Å–ø–µ–∫—Ç—Ä–∞–º."""
        if self.photo_index >= len(self.current_spectra):
            self.arduino.send_and_wait("PHOTO_DONE", "OFF_DONE")
            self.arduino.close()
            self.status_bar.setText("–°—ä—ë–º–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            db = SessionLocal()
            task = db.query(PhotoTask).get(self.current_task_id)
            task.status = "completed"
            db.commit()
            db.close()
            self.shooting_in_progress = False
            self.update_tasks()
            self.update_buttons_state()
            return
        spec = self.current_spectra[self.photo_index]
        r, g, b = spec["rgb"]
        self.status_bar.setText(f"–ü–æ–¥—Å–≤–µ—Ç–∫–∞: {r},{g},{b} (—Ñ–æ—Ç–æ {self.photo_index + 1})")
        if not self.arduino.send_and_wait(f"SET {r},{g},{b}", "OK"):
            self.arduino.close()
            self.abort_shooting("–Ω–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É")
            return
        QTimer.singleShot(500, self.capture_photo)

    def capture_photo(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–Ω–∏–º–æ–∫ –∏ –≤—ã–∫–ª—é—á–∞–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ."""
        frame = self.camera_widget.get_frame()
        if frame is not None:
            spectrum_id = self.current_spectra[self.photo_index]["id"]
            save_photo_for_task(self.current_task_id, frame, spectrum_id)
        if not self.arduino.send_and_wait("PHOTO_DONE", "OFF_DONE"):
            self.arduino.close()
            self.abort_shooting("–Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É")
            return
        self.photo_index += 1
        QTimer.singleShot(200, self.start_next_photo)

    def delete_photos(self):
        """–£–¥–∞–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –µ—ë —Å—Ç–∞—Ç—É—Å."""
        task = self.get_selected_task()
        if not task:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É!")
            return
        reply = QMessageBox.question(self, "–£–¥–∞–ª–∏—Ç—å", "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏?",
                                    QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            clear_photos_for_task(task.id)
            db = SessionLocal()
            db_task = db.query(PhotoTask).get(task.id)
            if db_task:
                db_task.status = "pending"
                db.commit()
            db.close()
            self.status_bar.setText("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É–¥–∞–ª–µ–Ω—ã")
            self.update_tasks()
            self.update_buttons_state()

    def show_photos(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≥–∞–ª–µ—Ä–µ—é –¥–ª—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏."""
        task = self.get_selected_task()
        if not task:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É!")
            return
        self.gallery = GalleryWidget(task.id)
        self.gallery.setWindowTitle("üìÅ –ì–∞–ª–µ—Ä–µ—è")
        self.gallery.destroyed.connect(lambda: self.activateWindow())
        self.gallery.showFullScreen()

    def update_buttons_state(self):
        """–í–∫–ª—é—á–∞–µ—Ç/–æ—Ç–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é Arduino, —Ñ–æ—Ç–æ, —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å—ä—ë–º–∫–∏."""
        if self.shooting_in_progress:
            for btn in [self.photo_btn, self.gallery_btn, self.delete_btn, self.clear_tasks_btn]:
                btn.setEnabled(False)
            self.hotspot_toggle_btn.setEnabled(False)
            self.task_combo.setEnabled(False)
            return
        task = self.get_selected_task()
        has_photos = bool(task and get_photos_for_task(task.id))
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        self.photo_btn.setEnabled(self.arduino_available and bool(task) and task.status != "completed")
        self.gallery_btn.setEnabled(has_photos)
        self.delete_btn.setEnabled(has_photos)
        self.hotspot_toggle_btn.setEnabled(True)
        self.task_combo.setEnabled(True)

    def disable_all_buttons(self):
        for btn in [self.photo_btn, self.gallery_btn, self.delete_btn, self.clear_tasks_btn]:
            btn.setEnabled(False)
        self.hotspot_toggle_btn.setEnabled(False)
        self.task_combo.setEnabled(False)

    def toggle_hotspot(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–æ—á–∫—É –¥–æ—Å—Ç—É–ø–∞ (WiFi AP)."""
        if self.hotspot_toggle_btn.isChecked():
            if not ConfirmDialog.confirm(self, "–í–∫–ª—é—á–∏—Ç—å —Ç–æ—á–∫—É", "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —Ç–æ—á–∫—É –¥–æ—Å—Ç—É–ø–∞?", "–î–∞", "–ù–µ—Ç"):
                self.hotspot_toggle_btn.setChecked(False)
                return
            # –í–ö–õ–Æ–ß–ï–ù–ò–ï –¢–û–ß–ö–ò
            success, state = enable_hotspot()
            if success:
                self.hotspot_active = True
                self.hotspot_state = state  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                self.hotspot_toggle_btn.setIcon(QIcon(icon_path("wifi_on.png")))
                self.status_bar.setText("–¢–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤–∫–ª—é—á–µ–Ω–∞")
            else:
                self.hotspot_toggle_btn.setChecked(False)
                self.status_bar.setText("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å —Ç–æ—á–∫—É –¥–æ—Å—Ç—É–ø–∞")
        else:
            if not ConfirmDialog.confirm(self, "–í—ã–∫–ª—é—á–∏—Ç—å —Ç–æ—á–∫—É", "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å —Ç–æ—á–∫—É –¥–æ—Å—Ç—É–ø–∞?", "–î–∞", "–ù–µ—Ç"):
                self.hotspot_toggle_btn.setChecked(True)
                return
            # –í–´–ö–õ–Æ–ß–ï–ù–ò–ï –¢–û–ß–ö–ò
            if hasattr(self, "hotspot_state"):
                disabled = disable_hotspot(self.hotspot_state)
            else:
                disabled = disable_hotspot()  # fallback
            if disabled:
                self.hotspot_active = False
                self.hotspot_toggle_btn.setIcon(QIcon(icon_path("wifi_off.png")))
                self.status_bar.setText("–¢–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞")
            else:
                self.hotspot_toggle_btn.setChecked(True)
                self.status_bar.setText("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å —Ç–æ—á–∫—É –¥–æ—Å—Ç—É–ø–∞")

    def showEvent(self, event):
        super().showEvent(event)
        self.update_tasks()

    def closeEvent(self, event):
        self.arduino_watcher.stop()
        self.camera_widget.close()
        event.accept()

    def abort_shooting(self, reason: str):
        """–ü—Ä–µ—Ä—ã–≤–∞–µ—Ç —Å—ä—ë–º–∫—É, –æ—á–∏—â–∞–µ—Ç —Ñ–æ—Ç–æ –∏ –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∏—á–∏–Ω—É."""
        self.shooting_in_progress = False
        self.status_bar.setText(f"‚ùå –°—ä—ë–º–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞: {reason}")
        clear_photos_for_task(self.current_task_id)
        self.update_buttons_state()
